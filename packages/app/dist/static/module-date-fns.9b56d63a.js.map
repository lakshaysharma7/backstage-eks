{"version":3,"sources":["webpack://app/../node_modules/date-fns/esm/_lib/format/longFormatters/index.js","webpack://app/../node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack://app/../node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js","webpack://app/../node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","webpack://app/../node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js","webpack://app/../node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js","webpack://app/../node_modules/date-fns/esm/_lib/getUTCWeek/index.js","webpack://app/../node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js","webpack://app/../node_modules/date-fns/esm/_lib/protectedTokens/index.js","webpack://app/../node_modules/date-fns/esm/_lib/requiredArgs/index.js","webpack://app/../node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js","webpack://app/../node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js","webpack://app/../node_modules/date-fns/esm/_lib/toInteger/index.js","webpack://app/../node_modules/date-fns/esm/addDays/index.js","webpack://app/../node_modules/date-fns/esm/addMonths/index.js","webpack://app/../node_modules/date-fns/esm/addYears/index.js","webpack://app/../node_modules/date-fns/esm/differenceInMilliseconds/index.js","webpack://app/../node_modules/date-fns/esm/eachDayOfInterval/index.js","webpack://app/../node_modules/date-fns/esm/endOfDay/index.js","webpack://app/../node_modules/date-fns/esm/endOfMonth/index.js","webpack://app/../node_modules/date-fns/esm/endOfWeek/index.js","webpack://app/../node_modules/date-fns/esm/endOfYear/index.js","webpack://app/../node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js","webpack://app/../node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","webpack://app/../node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","webpack://app/../node_modules/date-fns/esm/_lib/format/formatters/index.js","webpack://app/../node_modules/date-fns/esm/format/index.js","webpack://app/../node_modules/date-fns/esm/getHours/index.js","webpack://app/../node_modules/date-fns/esm/getSeconds/index.js","webpack://app/../node_modules/date-fns/esm/getYear/index.js","webpack://app/../node_modules/date-fns/esm/isAfter/index.js","webpack://app/../node_modules/date-fns/esm/isBefore/index.js","webpack://app/../node_modules/date-fns/esm/isEqual/index.js","webpack://app/../node_modules/date-fns/esm/isSameDay/index.js","webpack://app/../node_modules/date-fns/esm/startOfHour/index.js","webpack://app/../node_modules/date-fns/esm/isSameHour/index.js","webpack://app/../node_modules/date-fns/esm/isSameMonth/index.js","webpack://app/../node_modules/date-fns/esm/isSameYear/index.js","webpack://app/../node_modules/date-fns/esm/isDate/index.js","webpack://app/../node_modules/date-fns/esm/isValid/index.js","webpack://app/../node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js","webpack://app/../node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js","webpack://app/../node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js","webpack://app/../node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js","webpack://app/../node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js","webpack://app/../node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js","webpack://app/../node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js","webpack://app/../node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","webpack://app/../node_modules/date-fns/esm/locale/en-US/_lib/match/index.js","webpack://app/../node_modules/date-fns/esm/locale/en-US/index.js","webpack://app/../node_modules/date-fns/esm/_lib/assign/index.js","webpack://app/../node_modules/date-fns/esm/_lib/setUTCDay/index.js","webpack://app/../node_modules/date-fns/esm/_lib/setUTCISODay/index.js","webpack://app/../node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js","webpack://app/../node_modules/date-fns/esm/_lib/setUTCWeek/index.js","webpack://app/../node_modules/date-fns/esm/parse/_lib/parsers/index.js","webpack://app/../node_modules/date-fns/esm/parse/index.js","webpack://app/../node_modules/date-fns/esm/constants/index.js","webpack://app/../node_modules/date-fns/esm/parseISO/index.js","webpack://app/../node_modules/date-fns/esm/setHours/index.js","webpack://app/../node_modules/date-fns/esm/setMinutes/index.js","webpack://app/../node_modules/date-fns/esm/getDaysInMonth/index.js","webpack://app/../node_modules/date-fns/esm/setMonth/index.js","webpack://app/../node_modules/date-fns/esm/setSeconds/index.js","webpack://app/../node_modules/date-fns/esm/setYear/index.js","webpack://app/../node_modules/date-fns/esm/startOfDay/index.js","webpack://app/../node_modules/date-fns/esm/startOfMonth/index.js","webpack://app/../node_modules/date-fns/esm/startOfWeek/index.js","webpack://app/../node_modules/date-fns/esm/startOfYear/index.js","webpack://app/../node_modules/date-fns/esm/addMilliseconds/index.js","webpack://app/../node_modules/date-fns/esm/subMilliseconds/index.js","webpack://app/../node_modules/date-fns/esm/toDate/index.js"],"names":[],"mappings":"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","file":"static/module-date-fns.9b56d63a.js","sourcesContent":["function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/) || [];\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","import getUTCISOWeekYear from \"../getUTCISOWeekYear/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport startOfUTCISOWeekYear from \"../startOfUTCISOWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getUTCWeekYear from \"../getUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport startOfUTCWeekYear from \"../startOfUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\n\nexport default function addYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, amount * 12);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dateLeft, dateRight) {\n  requiredArgs(2, arguments);\n  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachDayOfInterval\n * @category Interval Helpers\n * @summary Return the array of dates within the specified time interval.\n *\n * @description\n * Return the array of dates within the specified time interval.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `eachDay` to `eachDayOfInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   eachDay(new Date(2014, 0, 10), new Date(2014, 0, 20))\n *\n *   // v2.0.0 onward\n *\n *   eachDayOfInterval(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) }\n *   )\n *   ```\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * const result = eachDayOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 9, 10)\n * })\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\n\nexport default function eachDayOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setDate(currentDate.getDate() + step);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n\n  return dates;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the end of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nexport default function endOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setDate(date.getDate() + diff);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfYear\n * @category Year Helpers\n * @summary Return the end of a year for the given date.\n *\n * @description\n * Return the end of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a year for 2 September 2014 11:55:00:\n * var result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Dec 31 2014 23:59:59.999\n */\n\nexport default function endOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  date.setFullYear(year + 1, 0, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import addLeadingZeros from \"../../addLeadingZeros/index.js\";\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaa':\n        return dayPeriodEnumValue;\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","import getUTCDayOfYear from \"../../../_lib/getUTCDayOfYear/index.js\";\nimport getUTCISOWeek from \"../../../_lib/getUTCISOWeek/index.js\";\nimport getUTCISOWeekYear from \"../../../_lib/getUTCISOWeekYear/index.js\";\nimport getUTCWeek from \"../../../_lib/getUTCWeek/index.js\";\nimport getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport addLeadingZeros from \"../../addLeadingZeros/index.js\";\nimport lightFormatters from \"../lightFormatters/index.js\";\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n};\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","import isValid from \"../isValid/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport formatters from \"../_lib/format/formatters/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getHours\n * @category Hour Helpers\n * @summary Get the hours of the given date.\n *\n * @description\n * Get the hours of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the hours of 29 February 2012 11:45:00:\n * const result = getHours(new Date(2012, 1, 29, 11, 45))\n * //=> 11\n */\n\nexport default function getHours(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var hours = date.getHours();\n  return hours;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getSeconds\n * @category Second Helpers\n * @summary Get the seconds of the given date.\n *\n * @description\n * Get the seconds of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the seconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the seconds of 29 February 2012 11:45:05.123:\n * const result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 5\n */\n\nexport default function getSeconds(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var seconds = date.getSeconds();\n  return seconds;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getYear\n * @category Year Helpers\n * @summary Get the year of the given date.\n *\n * @description\n * Get the year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which year is 2 July 2014?\n * const result = getYear(new Date(2014, 6, 2))\n * //=> 2014\n */\n\nexport default function getYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getFullYear();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be after the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is after the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\n\nexport default function isAfter(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() > dateToCompare.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\n\nexport default function isBefore(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isEqual\n * @category Common Helpers\n * @summary Are the given dates equal?\n *\n * @description\n * Are the given dates equal?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Boolean} the dates are equal\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?\n * var result = isEqual(\n *   new Date(2014, 6, 2, 6, 30, 45, 0),\n *   new Date(2014, 6, 2, 6, 30, 45, 500)\n * )\n * //=> false\n */\n\nexport default function isEqual(dirtyLeftDate, dirtyRightDate) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyLeftDate);\n  var dateRight = toDate(dirtyRightDate);\n  return dateLeft.getTime() === dateRight.getTime();\n}","import startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day (and year and month)?\n *\n * @description\n * Are the given dates in the same day (and year and month)?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day (and year and month)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n * \n * @example\n * // Are 4 September and 4 October in the same day?\n * var result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n * //=> false\n * \n * @example\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n * //=> false\n */\n\nexport default function isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * const result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\n\nexport default function startOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(0, 0, 0);\n  return date;\n}","import startOfHour from \"../startOfHour/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameHour\n * @category Hour Helpers\n * @summary Are the given dates in the same hour (and same day)?\n *\n * @description\n * Are the given dates in the same hour (and same day)?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same hour (and same day)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 2014 06:00:00 and 4 September 06:30:00 in the same hour?\n * var result = isSameHour(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 6, 30))\n * //=> true\n * \n * @example\n * // Are 4 September 2014 06:00:00 and 5 September 06:00:00 in the same hour?\n * var result = isSameHour(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 5, 6, 0))\n * //=> false\n */\n\nexport default function isSameHour(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfHour = startOfHour(dirtyDateLeft);\n  var dateRightStartOfHour = startOfHour(dirtyDateRight);\n  return dateLeftStartOfHour.getTime() === dateRightStartOfHour.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameMonth\n * @category Month Helpers\n * @summary Are the given dates in the same month (and year)?\n *\n * @description\n * Are the given dates in the same month (and year)?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same month (and year)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same month?\n * var result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n *\n * @example\n * // Are 2 September 2014 and 25 September 2015 in the same month?\n * var result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))\n * //=> false\n */\n\nexport default function isSameMonth(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameYear\n * @category Year Helpers\n * @summary Are the given dates in the same year?\n *\n * @description\n * Are the given dates in the same year?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same year\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same year?\n * var result = isSameYear(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n */\n\nexport default function isSameYear(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear();\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\n\nexport default function isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}","import isDate from \"../isDate/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\n\nvar formatDistance = function (token, count, options) {\n  var result;\n  var tokenValue = formatDistanceLocale[token];\n\n  if (typeof tokenValue === 'string') {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace('{{count}}', count.toString());\n  }\n\n  if (options !== null && options !== void 0 && options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n};\n\nexport default formatDistance;","export default function buildFormatLongFn(args) {\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // TODO: Remove String()\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","import buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\n\nvar formatRelative = function (token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n};\n\nexport default formatRelative;","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n\n    return valuesArray[index];\n  };\n}","import buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']\n}; // Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\n\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nvar ordinalNumber = function (dirtyNumber, _options) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n};\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return quarter - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","export default function buildMatchFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    }) : findKey(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    });\n    var value;\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}","export default function buildMatchPatternFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}","import buildMatchFn from \"../../../_lib/buildMatchFn/index.js\";\nimport buildMatchPatternFn from \"../../../_lib/buildMatchPatternFn/index.js\";\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","import formatDistance from \"./_lib/formatDistance/index.js\";\nimport formatLong from \"./_lib/formatLong/index.js\";\nimport formatRelative from \"./_lib/formatRelative/index.js\";\nimport localize from \"./_lib/localize/index.js\";\nimport match from \"./_lib/match/index.js\";\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISODay(dirtyDate, dirtyDay) {\n  requiredArgs(2, arguments);\n  var day = toInteger(dirtyDay);\n\n  if (day % 7 === 0) {\n    day = day - 7;\n  }\n\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport getUTCISOWeek from \"../getUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISOWeek(dirtyDate, dirtyISOWeek) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeek = toInteger(dirtyISOWeek);\n  var diff = getUTCISOWeek(date) - isoWeek;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport getUTCWeek from \"../getUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCWeek(dirtyDate, dirtyWeek, options) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var week = toInteger(dirtyWeek);\n  var diff = getUTCWeek(date, options) - week;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport setUTCDay from \"../../../_lib/setUTCDay/index.js\";\nimport setUTCISODay from \"../../../_lib/setUTCISODay/index.js\";\nimport setUTCISOWeek from \"../../../_lib/setUTCISOWeek/index.js\";\nimport setUTCWeek from \"../../../_lib/setUTCWeek/index.js\";\nimport startOfUTCISOWeek from \"../../../_lib/startOfUTCISOWeek/index.js\";\nimport startOfUTCWeek from \"../../../_lib/startOfUTCWeek/index.js\";\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar MILLISECONDS_IN_SECOND = 1000;\nvar numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/,\n  // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/,\n  // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/,\n  // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/,\n  // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/,\n  // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/,\n  // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  minute: /^[0-5]?\\d/,\n  // 0 to 59\n  second: /^[0-5]?\\d/,\n  // 0 to 59\n  singleDigit: /^\\d/,\n  // 0 to 9\n  twoDigits: /^\\d{1,2}/,\n  // 0 to 99\n  threeDigits: /^\\d{1,3}/,\n  // 0 to 999\n  fourDigits: /^\\d{1,4}/,\n  // 0 to 9999\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/,\n  // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/,\n  // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/,\n  // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/ // 0 to 9999, -0 to -9999\n\n};\nvar timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/\n};\n\nfunction parseNumericPattern(pattern, string, valueCallback) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  var value = parseInt(matchResult[0], 10);\n  return {\n    value: valueCallback ? valueCallback(value) : value,\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseTimezonePattern(pattern, string) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  } // Input is 'Z'\n\n\n  if (matchResult[0] === 'Z') {\n    return {\n      value: 0,\n      rest: string.slice(1)\n    };\n  }\n\n  var sign = matchResult[1] === '+' ? 1 : -1;\n  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n  return {\n    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseAnyDigitsSigned(string, valueCallback) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);\n}\n\nfunction parseNDigits(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction parseNDigitsSigned(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^-?\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction dayPeriodEnumToHours(enumValue) {\n  switch (enumValue) {\n    case 'morning':\n      return 4;\n\n    case 'evening':\n      return 17;\n\n    case 'pm':\n    case 'noon':\n    case 'afternoon':\n      return 12;\n\n    case 'am':\n    case 'midnight':\n    case 'night':\n    default:\n      return 0;\n  }\n}\n\nfunction normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  var isCommonEra = currentYear > 0; // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n\n  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n  var result;\n\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    var rangeEnd = absCurrentYear + 50;\n    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\n\n\nvar parsers = {\n  // Era\n  G: {\n    priority: 140,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // AD, BC\n        case 'G':\n        case 'GG':\n        case 'GGG':\n          return match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n        // A, B\n\n        case 'GGGGG':\n          return match.era(string, {\n            width: 'narrow'\n          });\n        // Anno Domini, Before Christ\n\n        case 'GGGG':\n        default:\n          return match.era(string, {\n            width: 'wide'\n          }) || match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n      }\n    },\n    set: function (date, flags, value, _options) {\n      flags.era = value;\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['R', 'u', 't', 'T']\n  },\n  // Year\n  y: {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'yy'\n        };\n      };\n\n      switch (token) {\n        case 'y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, _options) {\n      var currentYear = date.getUTCFullYear();\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week-numbering year\n  Y: {\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'YY'\n        };\n      };\n\n      switch (token) {\n        case 'Y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'Yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, options) {\n      var currentYear = getUTCWeekYear(date, options);\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n        date.setUTCHours(0, 0, 0, 0);\n        return startOfUTCWeek(date, options);\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);\n      date.setUTCHours(0, 0, 0, 0);\n      return startOfUTCWeek(date, options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week-numbering year\n  R: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'R') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (_date, _flags, value, _options) {\n      var firstWeekOfYear = new Date(0);\n      firstWeekOfYear.setUTCFullYear(value, 0, 4);\n      firstWeekOfYear.setUTCHours(0, 0, 0, 0);\n      return startOfUTCISOWeek(firstWeekOfYear);\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Extended year\n  u: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'u') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Quarter\n  Q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'Q':\n        case 'QQ':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'Qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'QQQ':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'QQQQQ':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'QQQQ':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone quarter\n  q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'q':\n        case 'qq':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'qqq':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'qqqqq':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'qqqq':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Month\n  M: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'M':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'MM':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Mo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'MMM':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // J, F, ..., D\n\n        case 'MMMMM':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // January, February, ..., December\n\n        case 'MMMM':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone month\n  L: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'L':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'LL':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Lo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'LLL':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // J, F, ..., D\n\n        case 'LLLLL':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // January, February, ..., December\n\n        case 'LLLL':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week of year\n  w: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'w':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'wo':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCWeek(setUTCWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week of year\n  I: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'I':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'Io':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Day of the month\n  d: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'd':\n          return parseNumericPattern(numericPatterns.date, string);\n\n        case 'do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n      var month = date.getUTCMonth();\n\n      if (isLeapYear) {\n        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n      } else {\n        return value >= 1 && value <= DAYS_IN_MONTH[month];\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCDate(value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of year\n  D: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'D':\n        case 'DD':\n          return parseNumericPattern(numericPatterns.dayOfYear, string);\n\n        case 'Do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n\n      if (isLeapYear) {\n        return value >= 1 && value <= 366;\n      } else {\n        return value >= 1 && value <= 365;\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(0, value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of week\n  E: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // Tue\n        case 'E':\n        case 'EE':\n        case 'EEE':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'EEEEE':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'EEEEEE':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'EEEE':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local day of week\n  e: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'e':\n        case 'ee':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'eo':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'eee':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'eeeee':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'eeeeee':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'eeee':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']\n  },\n  // Stand-alone local day of week\n  c: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'c':\n        case 'cc':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'co':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'ccc':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // T\n\n        case 'ccccc':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tu\n\n        case 'cccccc':\n          return match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tuesday\n\n        case 'cccc':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']\n  },\n  // ISO day of week\n  i: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        if (value === 0) {\n          return 7;\n        }\n\n        return value;\n      };\n\n      switch (token) {\n        // 2\n        case 'i':\n        case 'ii':\n          // 02\n          return parseNDigits(token.length, string);\n        // 2nd\n\n        case 'io':\n          return match.ordinalNumber(string, {\n            unit: 'day'\n          });\n        // Tue\n\n        case 'iii':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // T\n\n        case 'iiiii':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tu\n\n        case 'iiiiii':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tuesday\n\n        case 'iiii':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 7;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCISODay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']\n  },\n  // AM or PM\n  a: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'a':\n        case 'aa':\n        case 'aaa':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaaa':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaa':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['b', 'B', 'H', 'k', 't', 'T']\n  },\n  // AM, PM, midnight\n  b: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'b':\n        case 'bb':\n        case 'bbb':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbbb':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbb':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'B', 'H', 'k', 't', 'T']\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'B':\n        case 'BB':\n        case 'BBB':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBBB':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBB':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 't', 'T']\n  },\n  // Hour [1-12]\n  h: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'h':\n          return parseNumericPattern(numericPatterns.hour12h, string);\n\n        case 'ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 12;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else if (!isPM && value === 12) {\n        date.setUTCHours(0, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['H', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-23]\n  H: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'H':\n          return parseNumericPattern(numericPatterns.hour23h, string);\n\n        case 'Ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 23;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(value, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-11]\n  K: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'K':\n          return parseNumericPattern(numericPatterns.hour11h, string);\n\n        case 'Ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['h', 'H', 'k', 't', 'T']\n  },\n  // Hour [1-24]\n  k: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'k':\n          return parseNumericPattern(numericPatterns.hour24h, string);\n\n        case 'ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 24;\n    },\n    set: function (date, _flags, value, _options) {\n      var hours = value <= 24 ? value % 24 : value;\n      date.setUTCHours(hours, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']\n  },\n  // Minute\n  m: {\n    priority: 60,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'm':\n          return parseNumericPattern(numericPatterns.minute, string);\n\n        case 'mo':\n          return match.ordinalNumber(string, {\n            unit: 'minute'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMinutes(value, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Second\n  s: {\n    priority: 50,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 's':\n          return parseNumericPattern(numericPatterns.second, string);\n\n        case 'so':\n          return match.ordinalNumber(string, {\n            unit: 'second'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCSeconds(value, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Fraction of second\n  S: {\n    priority: 30,\n    parse: function (string, token, _match, _options) {\n      var valueCallback = function (value) {\n        return Math.floor(value * Math.pow(10, -token.length + 3));\n      };\n\n      return parseNDigits(token.length, string, valueCallback);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMilliseconds(value);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Timezone (ISO-8601. +00:00 is `'Z'`)\n  X: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'X':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'XX':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'XXXX':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'XXXXX':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'XXX':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'x']\n  },\n  // Timezone (ISO-8601)\n  x: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'x':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'xx':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'xxxx':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'xxxxx':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'xxx':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'X']\n  },\n  // Seconds timestamp\n  t: {\n    priority: 40,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value * 1000), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  },\n  // Milliseconds timestamp\n  T: {\n    priority: 20,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  }\n};\nexport default parsers;","import defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport assign from \"../_lib/assign/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport parsers from \"./_lib/parsers/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar notWhitespaceRegExp = /\\S/;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Old `parse` was renamed to `toDate`.\n *   Now `parse` is a new function which parses a string using a provided format.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward (toDate no longer accepts a string)\n *   toDate(1392098430000) // Unix to timestamp\n *   toDate(new Date(2014, 1, 11, 11, 30, 30)) // Cloning the date\n *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\n *   ```\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the string of tokens\n * @param {Date|Number} referenceDate - defines values missing from the parsed dateString\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Date} the parsed date\n * @throws {TypeError} 3 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\n\nexport default function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {\n  requiredArgs(3, arguments);\n  var dateString = String(dirtyDateString);\n  var formatString = String(dirtyFormatString);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.match) {\n    throw new RangeError('locale must contain match property');\n  }\n\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (formatString === '') {\n    if (dateString === '') {\n      return toDate(dirtyReferenceDate);\n    } else {\n      return new Date(NaN);\n    }\n  }\n\n  var subFnOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale\n  }; // If timezone isn't specified, it will be set to the system timezone\n\n  var setters = [{\n    priority: TIMEZONE_UNIT_PRIORITY,\n    subPriority: -1,\n    set: dateToSystemTimezone,\n    index: 0\n  }];\n  var i;\n  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, subFnOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp);\n  var usedTokens = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    var firstCharacter = token[0];\n    var parser = parsers[firstCharacter];\n\n    if (parser) {\n      var incompatibleTokens = parser.incompatibleTokens;\n\n      if (Array.isArray(incompatibleTokens)) {\n        var incompatibleToken = void 0;\n\n        for (var _i = 0; _i < usedTokens.length; _i++) {\n          var usedToken = usedTokens[_i].token;\n\n          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {\n            incompatibleToken = usedTokens[_i];\n            break;\n          }\n        }\n\n        if (incompatibleToken) {\n          throw new RangeError(\"The format string mustn't contain `\".concat(incompatibleToken.fullToken, \"` and `\").concat(token, \"` at the same time\"));\n        }\n      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {\n        throw new RangeError(\"The format string mustn't contain `\".concat(token, \"` and any other token at the same time\"));\n      }\n\n      usedTokens.push({\n        token: firstCharacter,\n        fullToken: token\n      });\n      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);\n\n      if (!parseResult) {\n        return new Date(NaN);\n      }\n\n      setters.push({\n        priority: parser.priority,\n        subPriority: parser.subPriority || 0,\n        set: parser.set,\n        validate: parser.validate,\n        value: parseResult.value,\n        index: setters.length\n      });\n      dateString = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n      } // Replace two single quote characters with one single quote character\n\n\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      } // Cut token from string, or, if string doesn't match the token, return Invalid Date\n\n\n      if (dateString.indexOf(token) === 0) {\n        dateString = dateString.slice(token.length);\n      } else {\n        return new Date(NaN);\n      }\n    }\n  } // Check if the remaining input contains something other than whitespace\n\n\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\n    return new Date(NaN);\n  }\n\n  var uniquePrioritySetters = setters.map(function (setter) {\n    return setter.priority;\n  }).sort(function (a, b) {\n    return b - a;\n  }).filter(function (priority, index, array) {\n    return array.indexOf(priority) === index;\n  }).map(function (priority) {\n    return setters.filter(function (setter) {\n      return setter.priority === priority;\n    }).sort(function (a, b) {\n      return b.subPriority - a.subPriority;\n    });\n  }).map(function (setterArray) {\n    return setterArray[0];\n  });\n  var date = toDate(dirtyReferenceDate);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var flags = {};\n\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\n    var setter = uniquePrioritySetters[i];\n\n    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {\n      return new Date(NaN);\n    }\n\n    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)\n\n    if (result[0]) {\n      utcDate = result[0];\n      assign(flags, result[1]); // Result is date\n    } else {\n      utcDate = result;\n    }\n  }\n\n  return utcDate;\n}\n\nfunction dateToSystemTimezone(date, flags) {\n  if (flags.timestampIsSet) {\n    return date;\n  }\n\n  var convertedDate = new Date(0);\n  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  return convertedDate;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInWeek = 7;\n/**\n * Maximum allowed time.\n *\n * @name maxTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInMinute = 60000;\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInHour = 3600000;\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInSecond = 1000;\n/**\n * Minimum allowed time.\n *\n * @name minTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minTime = -maxTime;\n/**\n * Minutes in 1 hour\n *\n * @name minutesInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minutesInHour = 60;\n/**\n * Months in 1 quarter\n *\n * @name monthsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInQuarter = 3;\n/**\n * Months in 1 year\n *\n * @name monthsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInYear = 12;\n/**\n * Quarters in 1 year\n *\n * @name quartersInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var quartersInYear = 4;\n/**\n * Seconds in 1 hour\n *\n * @name secondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInHour = 3600;\n/**\n * Seconds in 1 minute\n *\n * @name secondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMinute = 60;","import { millisecondsInHour, millisecondsInMinute } from \"../constants/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? 2 : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time)) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(0);\n    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());\n    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString; // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: NaN,\n    restDateString: ''\n  };\n  var year = captures[1] ? parseInt(captures[1]) : null;\n  var century = captures[2] ? parseInt(captures[2]) : null; // either year or century is null, not both\n\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return new Date(NaN);\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setHours\n * @category Hour Helpers\n * @summary Set the hours to the given date.\n *\n * @description\n * Set the hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} hours - the hours of the new date\n * @returns {Date} the new date with the hours set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 4 hours to 1 September 2014 11:30:00:\n * var result = setHours(new Date(2014, 8, 1, 11, 30), 4)\n * //=> Mon Sep 01 2014 04:30:00\n */\n\nexport default function setHours(dirtyDate, dirtyHours) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var hours = toInteger(dirtyHours);\n  date.setHours(hours);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setMinutes\n * @category Minute Helpers\n * @summary Set the minutes to the given date.\n *\n * @description\n * Set the minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} minutes - the minutes of the new date\n * @returns {Date} the new date with the minutes set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 minutes to 1 September 2014 11:30:40:\n * const result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:45:40\n */\n\nexport default function setMinutes(dirtyDate, dirtyMinutes) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var minutes = toInteger(dirtyMinutes);\n  date.setMinutes(minutes);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDaysInMonth\n * @category Month Helpers\n * @summary Get the number of days in a month of the given date.\n *\n * @description\n * Get the number of days in a month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in February 2000?\n * const result = getDaysInMonth(new Date(2000, 1))\n * //=> 29\n */\n\nexport default function getDaysInMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var monthIndex = date.getMonth();\n  var lastDayOfMonth = new Date(0);\n  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);\n  lastDayOfMonth.setHours(0, 0, 0, 0);\n  return lastDayOfMonth.getDate();\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport getDaysInMonth from \"../getDaysInMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setMonth\n * @category Month Helpers\n * @summary Set the month to the given date.\n *\n * @description\n * Set the month to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} month - the month of the new date\n * @returns {Date} the new date with the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set February to 1 September 2014:\n * const result = setMonth(new Date(2014, 8, 1), 1)\n * //=> Sat Feb 01 2014 00:00:00\n */\n\nexport default function setMonth(dirtyDate, dirtyMonth) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var month = toInteger(dirtyMonth);\n  var year = date.getFullYear();\n  var day = date.getDate();\n  var dateWithDesiredMonth = new Date(0);\n  dateWithDesiredMonth.setFullYear(year, month, 15);\n  dateWithDesiredMonth.setHours(0, 0, 0, 0);\n  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month\n  // if the original date was the last day of the longer month\n\n  date.setMonth(month, Math.min(day, daysInMonth));\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setSeconds\n * @category Second Helpers\n * @summary Set the seconds to the given date.\n *\n * @description\n * Set the seconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} seconds - the seconds of the new date\n * @returns {Date} the new date with the seconds set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 seconds to 1 September 2014 11:30:40:\n * const result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:30:45\n */\n\nexport default function setSeconds(dirtyDate, dirtySeconds) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var seconds = toInteger(dirtySeconds);\n  date.setSeconds(seconds);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setYear\n * @category Year Helpers\n * @summary Set the year to the given date.\n *\n * @description\n * Set the year to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} year - the year of the new date\n * @returns {Date} the new date with the year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set year 2013 to 1 September 2014:\n * const result = setYear(new Date(2014, 8, 1), 2013)\n * //=> Sun Sep 01 2013 00:00:00\n */\n\nexport default function setYear(dirtyDate, dirtyYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var year = toInteger(dirtyYear); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  date.setFullYear(year);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\n\nexport default function startOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var cleanDate = toDate(dirtyDate);\n  var date = new Date(0);\n  date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}"],"sourceRoot":""}