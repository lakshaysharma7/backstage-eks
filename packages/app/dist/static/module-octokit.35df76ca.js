"use strict";(()=>{(self.webpackChunkapp=self.webpackChunkapp||[]).push([[1410],{54733:function(ce,R,f){f.d(R,{i:function(){return w}});var F=f(7502),C=f(31765),P=f(23531),k=f.n(P),S=f(78084);async function v(e,r){const a=A(e,r.auth);if(a)return a;const{data:u}=await(0,S.TG)({clientType:e.clientType,clientId:e.clientId,request:r.request||e.request,scopes:r.auth.scopes||e.scopes});await e.onVerification(u);const i=await y(r.request||e.request,e.clientId,e.clientType,u);return e.authentication=i,i}function A(e,r){if(r.refresh===!0||!e.authentication)return!1;if(e.clientType==="github-app")return e.authentication;const a=e.authentication,u=("scopes"in r&&r.scopes||e.scopes).join(" "),i=a.scopes.join(" ");return u===i?a:!1}async function q(e){await new Promise(r=>setTimeout(r,e*1e3))}async function y(e,r,a,u){try{const i={clientId:r,request:e,code:u.device_code},{authentication:b}=a==="oauth-app"?await(0,S.i7)({...i,clientType:"oauth-app"}):await(0,S.i7)({...i,clientType:"github-app"});return{type:"token",tokenType:"oauth",...b}}catch(i){if(!i.response)throw i;const b=i.response.data.error;if(b==="authorization_pending")return await q(u.interval),y(e,r,a,u);if(b==="slow_down")return await q(u.interval+5),y(e,r,a,u);throw i}}async function D(e,r){return v(e,{auth:r})}async function $(e,r,a,u){let i=r.endpoint.merge(a,u);if(/\/login\/(oauth\/access_token|device\/code)$/.test(i.url))return r(i);const{token:b}=await v(e,{request:r,auth:{type:"oauth"}});return i.headers.authorization=`token ${b}`,r(i)}const B="3.1.2";function W(e){const r=e.request||C.request.defaults({headers:{"user-agent":`octokit-auth-oauth-device.js/${B} ${(0,F.i)()}`}}),{request:a=r,...u}=e,i=e.clientType==="github-app"?{...u,clientType:"github-app",request:a}:{...u,clientType:"oauth-app",request:a,scopes:e.scopes||[]};if(!e.clientId)throw new Error('[@octokit/auth-oauth-device] "clientId" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)');if(!e.onVerification)throw new Error('[@octokit/auth-oauth-device] "onVerification" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)');return Object.assign(D.bind(null,i),{hook:$.bind(null,i)})}const j="1.3.0";async function z(e){if("code"in e.strategyOptions){const{authentication:r}=await(0,S.yi)({clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,...e.strategyOptions,request:e.request});return{type:"token",tokenType:"oauth",...r}}if("onVerification"in e.strategyOptions){const a=await W({clientType:e.clientType,clientId:e.clientId,...e.strategyOptions,request:e.request})({type:"oauth"});return{clientSecret:e.clientSecret,...a}}if("token"in e.strategyOptions)return{type:"token",tokenType:"oauth",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,...e.strategyOptions};throw new Error("[@octokit/auth-oauth-user] Invalid strategy options")}async function N(e,r={}){if(e.authentication||(e.authentication=e.clientType==="oauth-app"?await z(e):await z(e)),e.authentication.invalid)throw new Error("[@octokit/auth-oauth-user] Token is invalid");const a=e.authentication;if("expiresAt"in a&&(r.type==="refresh"||new Date(a.expiresAt)<new Date)){const{authentication:u}=await(0,S.g$)({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:a.refreshToken,request:e.request});e.authentication={tokenType:"oauth",type:"token",...u}}if(r.type==="refresh"){if(e.clientType==="oauth-app")throw new Error("[@octokit/auth-oauth-user] OAuth Apps do not support expiring tokens");if(!a.hasOwnProperty("expiresAt"))throw new Error("[@octokit/auth-oauth-user] Refresh token missing")}if(r.type==="check"||r.type==="reset"){const u=r.type==="check"?S.a_:S.Eu;try{const{authentication:i}=await u({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request});return e.authentication={tokenType:"oauth",type:"token",...i},e.authentication}catch(i){throw i.status===404&&(i.message="[@octokit/auth-oauth-user] Token is invalid",e.authentication.invalid=!0),i}}if(r.type==="delete"||r.type==="deleteAuthorization"){const u=r.type==="delete"?S.pQ:S.sA;try{await u({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request})}catch(i){if(i.status!==404)throw i}return e.authentication.invalid=!0,e.authentication}return e.authentication}const se=/\/applications\/[^/]+\/(token|grant)s?/;function x(e){return e&&se.test(e)}async function te(e,r,a,u={}){const i=r.endpoint.merge(a,u);if(/\/login\/(oauth\/access_token|device\/code)$/.test(i.url))return r(i);if(x(i.url)){const G=k()(`${e.clientId}:${e.clientSecret}`);return i.headers.authorization=`basic ${G}`,r(i)}const{token:b}=e.clientType==="oauth-app"?await N({...e,request:r}):await N({...e,request:r});return i.headers.authorization="token "+b,r(i)}function H({clientId:e,clientSecret:r,clientType:a="oauth-app",request:u=C.request.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${j} ${(0,F.i)()}`}}),...i}){const b=Object.assign({clientType:a,clientId:e,clientSecret:r,strategyOptions:i,request:u});return Object.assign(N.bind(null,b),{hook:te.bind(null,b)})}H.VERSION=j;async function K(e,r){if(r.type==="oauth-app")return{type:"oauth-app",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,headers:{authorization:`basic ${k()(`${e.clientId}:${e.clientSecret}`)}`}};if("factory"in r){const{type:i,...b}={...r,...e};return r.factory(b)}const a={clientId:e.clientId,clientSecret:e.clientSecret,request:e.request,...r};return(e.clientType==="oauth-app"?await H({...a,clientType:e.clientType}):await H({...a,clientType:e.clientType}))()}async function V(e,r,a,u){let i=r.endpoint.merge(a,u);if(/\/login\/(oauth\/access_token|device\/code)$/.test(i.url))return r(i);if(e.clientType==="github-app"&&!x(i.url))throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than "/applications/{client_id}/**". "${i.method} ${i.url}" is not supported.`);const b=k()(`${e.clientId}:${e.clientSecret}`);i.headers.authorization=`basic ${b}`;try{return await r(i)}catch(G){throw G.status!==401||(G.message=`[@octokit/auth-oauth-app] "${i.method} ${i.url}" does not support clientId/clientSecret basic authentication.`),G}}const ie="4.3.1";function J(e){const r=Object.assign({request:C.request.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${ie} ${(0,F.i)()}`}}),clientType:"oauth-app"},e);return Object.assign(K.bind(null,r),{hook:V.bind(null,r)})}var ae=f(91346),oe=f(6990),X=f(77105),Z=f.n(X);async function L({appId:e,privateKey:r,timeDifference:a}){try{const u=await(0,oe.C)({id:+e,privateKey:r,now:a&&Math.floor(Date.now()/1e3)+a});return{type:"app",token:u.token,appId:u.appId,expiresAt:new Date(u.expiration*1e3).toISOString()}}catch(u){throw r==="-----BEGIN RSA PRIVATE KEY-----"?new Error("The 'privateKey` option contains only the first line '-----BEGIN RSA PRIVATE KEY-----'. If you are setting it using a `.env` file, make sure it is set on a single line with newlines replaced by '\n'"):u}}function s(){return new(Z())({max:15e3,maxAge:1e3*60*59})}async function E(e,r){const a=g(r),u=await e.get(a);if(!u)return;const[i,b,G,U,I,Y]=u.split("|"),M=r.permissions||I.split(/,/).reduce((ee,re)=>(/!$/.test(re)?ee[re.slice(0,-1)]="write":ee[re]="read",ee),{});return{token:i,createdAt:b,expiresAt:G,permissions:M,repositoryIds:r.repositoryIds,repositoryNames:r.repositoryNames,singleFileName:Y,repositorySelection:U}}async function d(e,r,a){const u=g(r),i=r.permissions?"":Object.keys(a.permissions).map(G=>`${G}${a.permissions[G]==="write"?"!":""}`).join(","),b=[a.token,a.createdAt,a.expiresAt,a.repositorySelection,i,a.singleFileName].join("|");await e.set(u,b)}function g({installationId:e,permissions:r={},repositoryIds:a=[],repositoryNames:u=[]}){const i=Object.keys(r).sort().map(U=>r[U]==="read"?U:`${U}!`).join(","),b=a.sort().join(","),G=u.join(",");return[e,b,G,i].filter(Boolean).join("|")}function _({installationId:e,token:r,createdAt:a,expiresAt:u,repositorySelection:i,permissions:b,repositoryIds:G,repositoryNames:U,singleFileName:I}){return Object.assign({type:"token",tokenType:"installation",token:r,installationId:e,permissions:b,createdAt:a,expiresAt:u,repositorySelection:i},G?{repositoryIds:G}:null,U?{repositoryNames:U}:null,I?{singleFileName:I}:null)}async function O(e,r,a){const u=Number(r.installationId||e.installationId);if(!u)throw new Error("[@octokit/auth-app] installationId option is required for installation authentication.");if(r.factory){const{type:ne,factory:pe,oauthApp:he,...ue}={...e,...r};return pe(ue)}const i=Object.assign({installationId:u},r);if(!r.refresh){const ne=await E(e.cache,i);if(ne){const{token:pe,createdAt:he,expiresAt:ue,permissions:Ee,repositoryIds:we,repositoryNames:_e,singleFileName:be,repositorySelection:fe}=ne;return _({installationId:u,token:pe,createdAt:he,expiresAt:ue,permissions:Ee,repositorySelection:fe,repositoryIds:we,repositoryNames:_e,singleFileName:be})}}const b=await L(e),G=a||e.request,{data:{token:U,expires_at:I,repositories:Y,permissions:M,repository_selection:ee,single_file:re}}=await G("POST /app/installations/{installation_id}/access_tokens",{installation_id:u,repository_ids:r.repositoryIds,repositories:r.repositoryNames,permissions:r.permissions,mediaType:{previews:["machine-man"]},headers:{authorization:`bearer ${b.token}`}}),le=M||{},de=ee||"all",me=Y?Y.map(ne=>ne.id):void 0,ge=Y?Y.map(ne=>ne.name):void 0,Te=new Date().toISOString();return await d(e.cache,i,{token:U,createdAt:Te,expiresAt:I,repositorySelection:de,permissions:le,repositoryIds:me,repositoryNames:ge,singleFileName:re}),_({installationId:u,token:U,createdAt:Te,expiresAt:I,repositorySelection:de,permissions:le,repositoryIds:me,repositoryNames:ge,singleFileName:re})}async function Q(e,r){switch(r.type){case"app":return L(e);case"oauth":e.log.warn(new ae.$('[@octokit/auth-app] {type: "oauth"} is deprecated. Use {type: "oauth-app"} instead'));case"oauth-app":return e.oauthApp({type:"oauth-app"});case"installation":return O(e,{...r,type:"installation"});case"oauth-user":return e.oauthApp(r);default:throw new Error(`Invalid auth type: ${r.type}`)}}const t=["/app","/app/hook/config","/app/hook/deliveries","/app/hook/deliveries/{delivery_id}","/app/hook/deliveries/{delivery_id}/attempts","/app/installations","/app/installations/{installation_id}","/app/installations/{installation_id}/access_tokens","/app/installations/{installation_id}/suspended","/marketplace_listing/accounts/{account_id}","/marketplace_listing/plan","/marketplace_listing/plans","/marketplace_listing/plans/{plan_id}/accounts","/marketplace_listing/stubbed/accounts/{account_id}","/marketplace_listing/stubbed/plan","/marketplace_listing/stubbed/plans","/marketplace_listing/stubbed/plans/{plan_id}/accounts","/orgs/{org}/installation","/repos/{owner}/{repo}/installation","/users/{username}/installation"];function l(e){const a=`^(?:${e.map(u=>u.split("/").map(i=>i.startsWith("{")?"(?:.+?)":i).join("/")).map(u=>`(?:${u})`).join("|")})[^/]*$`;return new RegExp(a,"i")}const p=l(t);function T(e){return!!e&&p.test(e)}const h=5*1e3;function n(e){return!(e.message.match(/'Expiration time' claim \('exp'\) must be a numeric value representing the future time at which the assertion expires/)||e.message.match(/'Issued at' claim \('iat'\) must be an Integer representing the time that the assertion was issued/))}async function o(e,r,a,u){const i=r.endpoint.merge(a,u),b=i.url;if(/\/login\/oauth\/access_token$/.test(b))return r(i);if(T(b.replace(r.endpoint.DEFAULTS.baseUrl,""))){const{token:I}=await L(e);i.headers.authorization=`bearer ${I}`;let Y;try{Y=await r(i)}catch(M){if(n(M)||typeof M.response.headers.date=="undefined")throw M;const ee=Math.floor((Date.parse(M.response.headers.date)-Date.parse(new Date().toString()))/1e3);e.log.warn(M.message),e.log.warn(`[@octokit/auth-app] GitHub API time and system time are different by ${ee} seconds. Retrying request with the difference accounted for.`);const{token:re}=await L({...e,timeDifference:ee});return i.headers.authorization=`bearer ${re}`,r(i)}return Y}if(x(b)){const I=await e.oauthApp({type:"oauth-app"});return i.headers.authorization=I.headers.authorization,r(i)}const{token:G,createdAt:U}=await O(e,{},r);return i.headers.authorization=`token ${G}`,c(e,r,i,U)}async function c(e,r,a,u,i=0){const b=+new Date-+new Date(u);try{return await r(a)}catch(G){if(G.status!==401)throw G;if(b>=h)throw i>0&&(G.message=`After ${i} retries within ${b/1e3}s of creating the installation access token, the response remains 401. At this point, the cause may be an authentication problem or a system outage. Please check https://www.githubstatus.com for status information`),G;++i;const U=i*1e3;return e.log.warn(`[@octokit/auth-app] Retrying after 401 response to account for token replication delay (retry: ${i}, wait: ${U/1e3}s)`),await new Promise(I=>setTimeout(I,U)),c(e,r,a,u,i)}}const m="3.6.1";function w(e){if(!e.appId)throw new Error("[@octokit/auth-app] appId option is required");if(!e.privateKey)throw new Error("[@octokit/auth-app] privateKey option is required");if("installationId"in e&&!e.installationId)throw new Error("[@octokit/auth-app] installationId is set to a falsy value");const r=Object.assign({warn:console.warn.bind(console)},e.log),a=e.request||C.request.defaults({headers:{"user-agent":`octokit-auth-app.js/${m} ${(0,F.i)()}`}}),u=Object.assign({request:a,cache:s()},e,e.installationId?{installationId:Number(e.installationId)}:{},{log:r,oauthApp:J({clientType:"github-app",clientId:e.clientId||"",clientSecret:e.clientSecret||"",request:a})});return Object.assign(Q.bind(null,u),{hook:o.bind(null,u)})}},42469:function(ce,R,f){f.r(R),f.d(R,{oauthAuthorizationUrl:function(){return F}});function F(P){const k=P.clientType||"oauth-app",S=P.baseUrl||"https://github.com",v={clientType:k,allowSignup:P.allowSignup!==!1,clientId:P.clientId,login:P.login||null,redirectUrl:P.redirectUrl||null,state:P.state||Math.random().toString(36).substr(2),url:""};if(k==="oauth-app"){const A="scopes"in P?P.scopes:[];v.scopes=typeof A=="string"?A.split(/[,\s]+/).filter(Boolean):A}return v.url=C(`${S}/login/oauth/authorize`,v),v}function C(P,k){const S={allowSignup:"allow_signup",clientId:"client_id",login:"login",redirectUrl:"redirect_uri",scopes:"scope",state:"state"};let v=P;return Object.keys(S).filter(A=>k[A]!==null).filter(A=>A!=="scopes"?!0:k.clientType==="github-app"?!1:!Array.isArray(k[A])||k[A].length>0).map(A=>[S[A],`${k[A]}`]).forEach(([A,q],y)=>{v+=y===0?"?":"&",v+=`${A}=${encodeURIComponent(q)}`}),v}},78084:function(ce,R,f){var F;F={value:!0};function C(s){return s&&typeof s=="object"&&"default"in s?s.default:s}var P=f(42469),k=f(31765),S=f(29717),v=C(f(23531));const A="1.2.6";function q(s,E){var d=Object.keys(s);if(Object.getOwnPropertySymbols){var g=Object.getOwnPropertySymbols(s);E&&(g=g.filter(function(_){return Object.getOwnPropertyDescriptor(s,_).enumerable})),d.push.apply(d,g)}return d}function y(s){for(var E=1;E<arguments.length;E++){var d=arguments[E]!=null?arguments[E]:{};E%2?q(Object(d),!0).forEach(function(g){D(s,g,d[g])}):Object.getOwnPropertyDescriptors?Object.defineProperties(s,Object.getOwnPropertyDescriptors(d)):q(Object(d)).forEach(function(g){Object.defineProperty(s,g,Object.getOwnPropertyDescriptor(d,g))})}return s}function D(s,E,d){return E in s?Object.defineProperty(s,E,{value:d,enumerable:!0,configurable:!0,writable:!0}):s[E]=d,s}function $(s,E){if(s==null)return{};var d={},g=Object.keys(s),_,O;for(O=0;O<g.length;O++)_=g[O],!(E.indexOf(_)>=0)&&(d[_]=s[_]);return d}function B(s,E){if(s==null)return{};var d=$(s,E),g,_;if(Object.getOwnPropertySymbols){var O=Object.getOwnPropertySymbols(s);for(_=0;_<O.length;_++)g=O[_],!(E.indexOf(g)>=0)&&(!Object.prototype.propertyIsEnumerable.call(s,g)||(d[g]=s[g]))}return d}function W(s){const E=s.endpoint.DEFAULTS;return/^https:\/\/(api\.)?github\.com$/.test(E.baseUrl)?"https://github.com":E.baseUrl.replace("/api/v3","")}async function j(s,E,d){const g=y({baseUrl:W(s),headers:{accept:"application/json"}},d),_=await s(E,g);if("error"in _.data){const O=new S.RequestError(`${_.data.error_description} (${_.data.error}, ${_.data.error_uri})`,400,{request:s.endpoint.merge(E,g),headers:_.headers});throw O.response=_,O}return _}const z=["request"];function N(s){let{request:E=k.request}=s,d=B(s,z);const g=W(E);return P.oauthAuthorizationUrl(y(y({},d),{},{baseUrl:g}))}async function se(s){const E=s.request||k.request,d=await j(E,"POST /login/oauth/access_token",{client_id:s.clientId,client_secret:s.clientSecret,code:s.code,redirect_uri:s.redirectUrl}),g={clientType:s.clientType,clientId:s.clientId,clientSecret:s.clientSecret,token:d.data.access_token,scopes:d.data.scope.split(/\s+/).filter(Boolean)};if(s.clientType==="github-app"){if("refresh_token"in d.data){const _=new Date(d.headers.date).getTime();g.refreshToken=d.data.refresh_token,g.expiresAt=x(_,d.data.expires_in),g.refreshTokenExpiresAt=x(_,d.data.refresh_token_expires_in)}delete g.scopes}return y(y({},d),{},{authentication:g})}function x(s,E){return new Date(s+E*1e3).toISOString()}async function te(s){const E=s.request||k.request,d={client_id:s.clientId};return"scopes"in s&&Array.isArray(s.scopes)&&(d.scope=s.scopes.join(" ")),j(E,"POST /login/device/code",d)}async function H(s){const E=s.request||k.request,d=await j(E,"POST /login/oauth/access_token",{client_id:s.clientId,device_code:s.code,grant_type:"urn:ietf:params:oauth:grant-type:device_code"}),g={clientType:s.clientType,clientId:s.clientId,token:d.data.access_token,scopes:d.data.scope.split(/\s+/).filter(Boolean)};if("clientSecret"in s&&(g.clientSecret=s.clientSecret),s.clientType==="github-app"){if("refresh_token"in d.data){const _=new Date(d.headers.date).getTime();g.refreshToken=d.data.refresh_token,g.expiresAt=K(_,d.data.expires_in),g.refreshTokenExpiresAt=K(_,d.data.refresh_token_expires_in)}delete g.scopes}return y(y({},d),{},{authentication:g})}function K(s,E){return new Date(s+E*1e3).toISOString()}async function V(s){const d=await(s.request||k.request)("POST /applications/{client_id}/token",{headers:{authorization:`basic ${v(`${s.clientId}:${s.clientSecret}`)}`},client_id:s.clientId,access_token:s.token}),g={clientType:s.clientType,clientId:s.clientId,clientSecret:s.clientSecret,token:s.token,scopes:d.data.scopes};return d.data.expires_at&&(g.expiresAt=d.data.expires_at),s.clientType==="github-app"&&delete g.scopes,y(y({},d),{},{authentication:g})}async function ie(s){const E=s.request||k.request,d=await j(E,"POST /login/oauth/access_token",{client_id:s.clientId,client_secret:s.clientSecret,grant_type:"refresh_token",refresh_token:s.refreshToken}),g=new Date(d.headers.date).getTime(),_={clientType:"github-app",clientId:s.clientId,clientSecret:s.clientSecret,token:d.data.access_token,refreshToken:d.data.refresh_token,expiresAt:J(g,d.data.expires_in),refreshTokenExpiresAt:J(g,d.data.refresh_token_expires_in)};return y(y({},d),{},{authentication:_})}function J(s,E){return new Date(s+E*1e3).toISOString()}const ae=["request","clientType","clientId","clientSecret","token"];async function oe(s){const{request:E,clientType:d,clientId:g,clientSecret:_,token:O}=s,Q=B(s,ae),t=await(E||k.request)("POST /applications/{client_id}/token/scoped",y({headers:{authorization:`basic ${v(`${g}:${_}`)}`},client_id:g,access_token:O},Q)),l=Object.assign({clientType:d,clientId:g,clientSecret:_,token:t.data.token},t.data.expires_at?{expiresAt:t.data.expires_at}:{});return y(y({},t),{},{authentication:l})}async function X(s){const E=s.request||k.request,d=v(`${s.clientId}:${s.clientSecret}`),g=await E("PATCH /applications/{client_id}/token",{headers:{authorization:`basic ${d}`},client_id:s.clientId,access_token:s.token}),_={clientType:s.clientType,clientId:s.clientId,clientSecret:s.clientSecret,token:g.data.token,scopes:g.data.scopes};return g.data.expires_at&&(_.expiresAt=g.data.expires_at),s.clientType==="github-app"&&delete _.scopes,y(y({},g),{},{authentication:_})}async function Z(s){const E=s.request||k.request,d=v(`${s.clientId}:${s.clientSecret}`);return E("DELETE /applications/{client_id}/token",{headers:{authorization:`basic ${d}`},client_id:s.clientId,access_token:s.token})}async function L(s){const E=s.request||k.request,d=v(`${s.clientId}:${s.clientSecret}`);return E("DELETE /applications/{client_id}/grant",{headers:{authorization:`basic ${d}`},client_id:s.clientId,access_token:s.token})}F=A,R.a_=V,R.TG=te,R.sA=L,R.pQ=Z,R.i7=H,R.yi=se,F=N,R.g$=ie,R.Eu=X,F=oe},29717:function(ce,R,f){f.r(R),f.d(R,{RequestError:function(){return v}});var F=f(91346),C=f(29928),P=f.n(C);const k=P()(A=>console.warn(A)),S=P()(A=>console.warn(A));class v extends Error{constructor(q,y,D){super(q),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=y;let $;"headers"in D&&typeof D.headers!="undefined"&&($=D.headers),"response"in D&&(this.response=D.response,$=D.response.headers);const B=Object.assign({},D.request);D.request.headers.authorization&&(B.headers=Object.assign({},D.request.headers,{authorization:D.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),B.url=B.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=B,Object.defineProperty(this,"code",{get(){return k(new F.$("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),y}}),Object.defineProperty(this,"headers",{get(){return S(new F.$("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),$||{}}})}}},31765:function(ce,R,f){f.r(R),f.d(R,{request:function(){return Q}});var F=f(66439),C=f(7502);function P(t){return t?Object.keys(t).reduce((l,p)=>(l[p.toLowerCase()]=t[p],l),{}):{}}function k(t,l){const p=Object.assign({},t);return Object.keys(l).forEach(T=>{(0,F.P)(l[T])?T in t?p[T]=k(t[T],l[T]):Object.assign(p,{[T]:l[T]}):Object.assign(p,{[T]:l[T]})}),p}function S(t){for(const l in t)t[l]===void 0&&delete t[l];return t}function v(t,l,p){if(typeof l=="string"){let[h,n]=l.split(" ");p=Object.assign(n?{method:h,url:n}:{url:h},p)}else p=Object.assign({},l);p.headers=P(p.headers),S(p),S(p.headers);const T=k(t||{},p);return t&&t.mediaType.previews.length&&(T.mediaType.previews=t.mediaType.previews.filter(h=>!T.mediaType.previews.includes(h)).concat(T.mediaType.previews)),T.mediaType.previews=T.mediaType.previews.map(h=>h.replace(/-preview/,"")),T}function A(t,l){const p=/\?/.test(t)?"&":"?",T=Object.keys(l);return T.length===0?t:t+p+T.map(h=>h==="q"?"q="+l.q.split("+").map(encodeURIComponent).join("+"):`${h}=${encodeURIComponent(l[h])}`).join("&")}const q=/\{[^}]+\}/g;function y(t){return t.replace(/^\W+|\W+$/g,"").split(/,/)}function D(t){const l=t.match(q);return l?l.map(y).reduce((p,T)=>p.concat(T),[]):[]}function $(t,l){return Object.keys(t).filter(p=>!l.includes(p)).reduce((p,T)=>(p[T]=t[T],p),{})}function B(t){return t.split(/(%[0-9A-Fa-f]{2})/g).map(function(l){return/%[0-9A-Fa-f]/.test(l)||(l=encodeURI(l).replace(/%5B/g,"[").replace(/%5D/g,"]")),l}).join("")}function W(t){return encodeURIComponent(t).replace(/[!'()*]/g,function(l){return"%"+l.charCodeAt(0).toString(16).toUpperCase()})}function j(t,l,p){return l=t==="+"||t==="#"?B(l):W(l),p?W(p)+"="+l:l}function z(t){return t!=null}function N(t){return t===";"||t==="&"||t==="?"}function se(t,l,p,T){var h=t[p],n=[];if(z(h)&&h!=="")if(typeof h=="string"||typeof h=="number"||typeof h=="boolean")h=h.toString(),T&&T!=="*"&&(h=h.substring(0,parseInt(T,10))),n.push(j(l,h,N(l)?p:""));else if(T==="*")Array.isArray(h)?h.filter(z).forEach(function(o){n.push(j(l,o,N(l)?p:""))}):Object.keys(h).forEach(function(o){z(h[o])&&n.push(j(l,h[o],o))});else{const o=[];Array.isArray(h)?h.filter(z).forEach(function(c){o.push(j(l,c))}):Object.keys(h).forEach(function(c){z(h[c])&&(o.push(W(c)),o.push(j(l,h[c].toString())))}),N(l)?n.push(W(p)+"="+o.join(",")):o.length!==0&&n.push(o.join(","))}else l===";"?z(h)&&n.push(W(p)):h===""&&(l==="&"||l==="?")?n.push(W(p)+"="):h===""&&n.push("");return n}function x(t){return{expand:te.bind(null,t)}}function te(t,l){var p=["+","#",".","/",";","?","&"];return t.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(T,h,n){if(h){let c="";const m=[];if(p.indexOf(h.charAt(0))!==-1&&(c=h.charAt(0),h=h.substr(1)),h.split(/,/g).forEach(function(w){var e=/([^:\*]*)(?::(\d+)|(\*))?/.exec(w);m.push(se(l,c,e[1],e[2]||e[3]))}),c&&c!=="+"){var o=",";return c==="?"?o="&":c!=="#"&&(o=c),(m.length!==0?c:"")+m.join(o)}else return m.join(",")}else return B(n)})}function H(t){let l=t.method.toUpperCase(),p=(t.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),T=Object.assign({},t.headers),h,n=$(t,["method","baseUrl","url","headers","request","mediaType"]);const o=D(p);p=x(p).expand(n),/^http/.test(p)||(p=t.baseUrl+p);const c=Object.keys(t).filter(e=>o.includes(e)).concat("baseUrl"),m=$(n,c);if(!/application\/octet-stream/i.test(T.accept)&&(t.mediaType.format&&(T.accept=T.accept.split(/,/).map(e=>e.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${t.mediaType.format}`)).join(",")),t.mediaType.previews.length)){const e=T.accept.match(/[\w-]+(?=-preview)/g)||[];T.accept=e.concat(t.mediaType.previews).map(r=>{const a=t.mediaType.format?`.${t.mediaType.format}`:"+json";return`application/vnd.github.${r}-preview${a}`}).join(",")}return["GET","HEAD"].includes(l)?p=A(p,m):"data"in m?h=m.data:Object.keys(m).length?h=m:T["content-length"]=0,!T["content-type"]&&typeof h!="undefined"&&(T["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(l)&&typeof h=="undefined"&&(h=""),Object.assign({method:l,url:p,headers:T},typeof h!="undefined"?{body:h}:null,t.request?{request:t.request}:null)}function K(t,l,p){return H(v(t,l,p))}function V(t,l){const p=v(t,l),T=K.bind(null,p);return Object.assign(T,{DEFAULTS:p,defaults:V.bind(null,p),merge:v.bind(null,p),parse:H})}const J=`octokit-endpoint.js/6.0.12 ${(0,C.i)()}`,oe=V(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":J},mediaType:{format:"",previews:[]}});var X=f(34911),Z=f.n(X),L=f(29717);const s="5.6.3";function E(t){return t.arrayBuffer()}function d(t){const l=t.request&&t.request.log?t.request.log:console;((0,F.P)(t.body)||Array.isArray(t.body))&&(t.body=JSON.stringify(t.body));let p={},T,h;return(t.request&&t.request.fetch||Z())(t.url,Object.assign({method:t.method,body:t.body,headers:t.headers,redirect:t.redirect},t.request)).then(async o=>{h=o.url,T=o.status;for(const c of o.headers)p[c[0]]=c[1];if("deprecation"in p){const c=p.link&&p.link.match(/<([^>]+)>; rel="deprecation"/),m=c&&c.pop();l.warn(`[@octokit/request] "${t.method} ${t.url}" is deprecated. It is scheduled to be removed on ${p.sunset}${m?`. See ${m}`:""}`)}if(!(T===204||T===205)){if(t.method==="HEAD"){if(T<400)return;throw new L.RequestError(o.statusText,T,{response:{url:h,status:T,headers:p,data:void 0},request:t})}if(T===304)throw new L.RequestError("Not modified",T,{response:{url:h,status:T,headers:p,data:await g(o)},request:t});if(T>=400){const c=await g(o);throw new L.RequestError(_(c),T,{response:{url:h,status:T,headers:p,data:c},request:t})}return g(o)}}).then(o=>({status:T,url:h,headers:p,data:o})).catch(o=>{throw o instanceof L.RequestError?o:new L.RequestError(o.message,500,{request:t})})}async function g(t){const l=t.headers.get("content-type");return/application\/json/.test(l)?t.json():!l||/^text\/|charset=utf-8$/.test(l)?t.text():E(t)}function _(t){return typeof t=="string"?t:"message"in t?Array.isArray(t.errors)?`${t.message}: ${t.errors.map(JSON.stringify).join(", ")}`:t.message:`Unknown error: ${JSON.stringify(t)}`}function O(t,l){const p=t.defaults(l);return Object.assign(function(h,n){const o=p.merge(h,n);if(!o.request||!o.request.hook)return d(p.parse(o));const c=(m,w)=>d(p.parse(p.merge(m,w)));return Object.assign(c,{endpoint:p,defaults:O.bind(null,p)}),o.request.hook(c,o)},{endpoint:p,defaults:O.bind(null,p)})}const Q=O(oe,{headers:{"user-agent":`octokit-request.js/${s} ${(0,C.i)()}`}})},89393:function(ce,R,f){f.d(R,{v:function(){return h}});var F=f(7502),C=f(93222),P=f(31765);const k="4.8.0";function S(n){return`Request failed due to following response errors:
`+n.errors.map(o=>` - ${o.message}`).join(`
`)}class v extends Error{constructor(o,c,m){super(S(m)),this.request=o,this.headers=c,this.response=m,this.name="GraphqlResponseError",this.errors=m.errors,this.data=m.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}}const A=["method","baseUrl","url","headers","request","query","mediaType"],q=["query","method","url"],y=/\/api\/v3\/?$/;function D(n,o,c){if(c){if(typeof o=="string"&&"query"in c)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const r in c)if(!!q.includes(r))return Promise.reject(new Error(`[@octokit/graphql] "${r}" cannot be used as variable name`))}const m=typeof o=="string"?Object.assign({query:o},c):o,w=Object.keys(m).reduce((r,a)=>A.includes(a)?(r[a]=m[a],r):(r.variables||(r.variables={}),r.variables[a]=m[a],r),{}),e=m.baseUrl||n.endpoint.DEFAULTS.baseUrl;return y.test(e)&&(w.url=e.replace(y,"/api/graphql")),n(w).then(r=>{if(r.data.errors){const a={};for(const u of Object.keys(r.headers))a[u]=r.headers[u];throw new v(w,a,r.data)}return r.data.data})}function $(n,o){const c=n.defaults(o);return Object.assign((w,e)=>D(c,w,e),{defaults:$.bind(null,c),endpoint:P.request.endpoint})}const B=$(P.request,{headers:{"user-agent":`octokit-graphql.js/${k} ${(0,F.i)()}`},method:"POST",url:"/graphql"});function W(n){return $(n,{method:"POST",url:"/graphql"})}const j=/^v1\./,z=/^ghs_/,N=/^ghu_/;async function se(n){const o=n.split(/\./).length===3,c=j.test(n)||z.test(n),m=N.test(n);return{type:"token",token:n,tokenType:o?"app":c?"installation":m?"user-to-server":"oauth"}}function x(n){return n.split(/\./).length===3?`bearer ${n}`:`token ${n}`}async function te(n,o,c,m){const w=o.endpoint.merge(c,m);return w.headers.authorization=x(n),o(w)}const H=function(o){if(!o)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof o!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return o=o.replace(/^(token|bearer) +/i,""),Object.assign(se.bind(null,o),{hook:te.bind(null,o)})},K="3.6.0";class V{constructor(o={}){const c=new C.Collection,m={baseUrl:P.request.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},o.request,{hook:c.bind(null,"request")}),mediaType:{previews:[],format:""}};if(m.headers["user-agent"]=[o.userAgent,`octokit-core.js/${K} ${(0,F.i)()}`].filter(Boolean).join(" "),o.baseUrl&&(m.baseUrl=o.baseUrl),o.previews&&(m.mediaType.previews=o.previews),o.timeZone&&(m.headers["time-zone"]=o.timeZone),this.request=P.request.defaults(m),this.graphql=W(this.request).defaults(m),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},o.log),this.hook=c,o.authStrategy){const{authStrategy:e,...r}=o,a=e(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:r},o.auth));c.wrap("request",a.hook),this.auth=a}else if(!o.auth)this.auth=async()=>({type:"unauthenticated"});else{const e=H(o.auth);c.wrap("request",e.hook),this.auth=e}this.constructor.plugins.forEach(e=>{Object.assign(this,e(this,o))})}static defaults(o){return class extends this{constructor(...m){const w=m[0]||{};if(typeof o=="function"){super(o(w));return}super(Object.assign({},o,w,w.userAgent&&o.userAgent?{userAgent:`${w.userAgent} ${o.userAgent}`}:null))}}}static plugin(...o){var c;const m=this.plugins;return c=class extends this{},c.plugins=m.concat(o.filter(e=>!m.includes(e))),c}}V.VERSION=K,V.plugins=[];const ie="1.0.4";function J(n){n.hook.wrap("request",(o,c)=>{n.log.debug("request",c);const m=Date.now(),w=n.request.endpoint.parse(c),e=w.url.replace(c.baseUrl,"");return o(c).then(r=>(n.log.info(`${w.method} ${e} - ${r.status} in ${Date.now()-m}ms`),r)).catch(r=>{throw n.log.info(`${w.method} ${e} - ${r.status} in ${Date.now()-m}ms`),r})})}J.VERSION=ie;const ae="2.17.0";function oe(n){if(!n.data)return{...n,data:[]};if(!("total_count"in n.data&&!("url"in n.data)))return n;const c=n.data.incomplete_results,m=n.data.repository_selection,w=n.data.total_count;delete n.data.incomplete_results,delete n.data.repository_selection,delete n.data.total_count;const e=Object.keys(n.data)[0],r=n.data[e];return n.data=r,typeof c!="undefined"&&(n.data.incomplete_results=c),typeof m!="undefined"&&(n.data.repository_selection=m),n.data.total_count=w,n}function X(n,o,c){const m=typeof o=="function"?o.endpoint(c):n.request.endpoint(o,c),w=typeof o=="function"?o:n.request,e=m.method,r=m.headers;let a=m.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!a)return{done:!0};try{const u=await w({method:e,url:a,headers:r}),i=oe(u);return a=((i.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:i}}catch(u){if(u.status!==409)throw u;return a="",{value:{status:200,headers:{},data:[]}}}}})}}function Z(n,o,c,m){return typeof c=="function"&&(m=c,c=void 0),L(n,[],X(n,o,c)[Symbol.asyncIterator](),m)}function L(n,o,c,m){return c.next().then(w=>{if(w.done)return o;let e=!1;function r(){e=!0}return o=o.concat(m?m(w.value,r):w.value.data),e?o:L(n,o,c,m)})}const s=Object.assign(Z,{iterator:X}),E=null;function d(n){return typeof n=="string"?E.includes(n):!1}function g(n){return{paginate:Object.assign(Z.bind(null,n),{iterator:X.bind(null,n)})}}g.VERSION=ae;const _={actions:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createOrUpdateEnvironmentSecret:["PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getEnvironmentPublicKey:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repositories/{repository_id}/environments/{environment_name}/secrets"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createContentAttachment:["POST /content_references/{content_reference_id}/attachments",{mediaType:{previews:["corsair"]}}],createContentAttachmentForRepo:["POST /repos/{owner}/{repo}/content_references/{content_reference_id}/attachments",{mediaType:{previews:["corsair"]}}],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},emojis:{get:["GET /emojis"]},enterpriseAdmin:{disableSelectedOrganizationGithubActionsEnterprise:["DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"],enableSelectedOrganizationGithubActionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"],getAllowedActionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions/selected-actions"],getGithubActionsPermissionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions"],listSelectedOrganizationsEnabledGithubActionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions/organizations"],setAllowedActionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/selected-actions"],setGithubActionsPermissionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions"],setSelectedOrganizationsEnabledGithubActionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/organizations"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{cancelImport:["DELETE /repos/{owner}/{repo}/import"],deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getCommitAuthors:["GET /repos/{owner}/{repo}/import/authors"],getImportStatus:["GET /repos/{owner}/{repo}/import"],getLargeFiles:["GET /repos/{owner}/{repo}/import/large_files"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],mapCommitAuthor:["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],setLfsPreference:["PATCH /repos/{owner}/{repo}/import/lfs"],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],startImport:["PUT /repos/{owner}/{repo}/import"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"],updateImport:["PATCH /repos/{owner}/{repo}/import"]},orgs:{blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createWebhook:["POST /orgs/{org}/hooks"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],get:["GET /orgs/{org}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableLfsForRepo:["DELETE /repos/{owner}/{repo}/lfs"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enableLfsForRepo:["PUT /repos/{owner}/{repo}/lfs"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}}],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}}],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics",{mediaType:{previews:["mercy"]}}],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}},O="5.13.0";function Q(n,o){const c={};for(const[m,w]of Object.entries(o))for(const[e,r]of Object.entries(w)){const[a,u,i]=r,[b,G]=a.split(/ /),U=Object.assign({method:b,url:G},u);c[m]||(c[m]={});const I=c[m];if(i){I[e]=t(n,m,e,U,i);continue}I[e]=n.request.defaults(U)}return c}function t(n,o,c,m,w){const e=n.request.defaults(m);function r(...a){let u=e.endpoint.merge(...a);if(w.mapToData)return u=Object.assign({},u,{data:u[w.mapToData],[w.mapToData]:void 0}),e(u);if(w.renamed){const[i,b]=w.renamed;n.log.warn(`octokit.${o}.${c}() has been renamed to octokit.${i}.${b}()`)}if(w.deprecated&&n.log.warn(w.deprecated),w.renamedParameters){const i=e.endpoint.merge(...a);for(const[b,G]of Object.entries(w.renamedParameters))b in i&&(n.log.warn(`"${b}" parameter is deprecated for "octokit.${o}.${c}()". Use "${G}" instead`),G in i||(i[G]=i[b]),delete i[b]);return e(i)}return e(...a)}return Object.assign(r,e)}function l(n){return{rest:Q(n,_)}}l.VERSION=O;function p(n){const o=Q(n,_);return{...o,rest:o}}p.VERSION=O;const T="18.12.0",h=V.plugin(J,p,g).defaults({userAgent:`octokit-rest.js/${T}`})}}]);})();

//# sourceMappingURL=module-octokit.35df76ca.js.map