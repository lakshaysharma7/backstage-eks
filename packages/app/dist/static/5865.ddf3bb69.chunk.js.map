{"version":3,"sources":["webpack://app/../node_modules/codemirror-graphql/results/mode.js"],"names":[],"mappings":"uGACA,GAAI,GAAmB,MAAQ,KAAK,iBAAoB,SAAU,EAAK,CACnE,MAAQ,IAAO,EAAI,WAAc,EAAM,CAAE,QAAW,CAAI,CAC5D,EACA,OAAO,eAAe,EAAS,aAAc,CAAE,MAAO,EAAK,CAAE,EAC7D,GAAI,GAAe,EAAgB,EAAQ,KAAY,CAAC,EACpD,EAA6B,EAAQ,KAA0B,EACnE,EAAa,QAAQ,WAAW,kBAAmB,SAAU,EAAQ,CACjE,GAAI,GAAS,EAA2B,aAAa,CACjD,cAAe,SAAU,EAAQ,CAAE,MAAO,GAAO,SAAS,CAAG,EAC7D,SAAU,EACV,WAAY,EACZ,aAAc,CAAE,QAAS,EAAO,OAAQ,CAC5C,CAAC,EACD,MAAO,CACH,OAAQ,EACR,WAAY,EAAO,WACnB,MAAO,EAAO,MACd,OAAQ,EACR,cAAe,YACf,KAAM,QACN,cAAe,CACX,MAAO,SACP,QAAS,MACb,CACJ,CACJ,CAAC,EACD,WAAgB,EAAO,EAAW,CAC9B,GAAI,GAAI,EACJ,EAAS,EAAM,OACf,EAAQ,CAAC,GAAU,EAAO,SAAW,EACnC,EAAM,YACN,EAAO,EAAO,OAAS,GAClB,MAAK,KAAK,iBAAmB,MAAQ,IAAO,SAAkB,EAAG,KAAK,CAAS,EAAK,EAAI,GACnG,MAAQ,IAAS,GAAQ,KAAK,KAAK,UAAY,MAAQ,IAAO,OAAS,OAAS,EAAG,aAAe,EACtG,CACA,GAAI,GAAW,CACX,YAAa,kBACb,OAAQ,4DACR,OAAQ,0DACR,QAAS,kBACb,EACI,EAAa,CACb,SAAU,CAAC,EAA2B,EAAE,GAAG,EAAG,EAA2B,KAAK,QAAS,EAA2B,EAAE,GAAG,CAAC,EAAG,EAA2B,EAAE,GAAG,CAAC,EAC5J,MAAO,CAAC,EAA2B,EAAE,SAAU,KAAK,EAAG,EAA2B,EAAE,GAAG,EAAG,OAAO,EACjG,MAAO,SAAU,EAAO,CACpB,OAAQ,EAAM,UACL,SACD,MAAO,kBACN,SACD,MAAO,kBACN,cACD,OAAQ,EAAM,WACL,IACD,MAAO,gBACN,IACD,MAAO,cAEf,MAAO,UACN,UACD,OAAQ,EAAM,WACL,WACA,QACD,MAAO,mBACN,OACD,MAAO,YAEf,MAAO,MAEnB,EACA,YAAa,CAAC,EAA2B,EAAE,SAAU,QAAQ,CAAC,EAC9D,YAAa,CAAC,EAA2B,EAAE,SAAU,QAAQ,CAAC,EAC9D,aAAc,CAAC,EAA2B,EAAE,UAAW,SAAS,CAAC,EACjE,UAAW,CAAC,EAA2B,EAAE,UAAW,SAAS,CAAC,EAC9D,UAAW,CAAC,EAA2B,EAAE,GAAG,EAAG,EAA2B,KAAK,QAAS,EAA2B,EAAE,GAAG,CAAC,EAAG,EAA2B,EAAE,GAAG,CAAC,EAC7J,YAAa,CAAC,EAA2B,EAAE,GAAG,EAAG,EAA2B,KAAK,cAAe,EAA2B,EAAE,GAAG,CAAC,EAAG,EAA2B,EAAE,GAAG,CAAC,EACrK,YAAa,CAAC,EAA2B,EAAE,SAAU,UAAU,EAAG,EAA2B,EAAE,GAAG,EAAG,OAAO,CAChH,C","file":"static/5865.ddf3bb69.chunk.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar codemirror_1 = __importDefault(require(\"codemirror\"));\nvar graphql_language_service_1 = require(\"graphql-language-service\");\ncodemirror_1.default.defineMode('graphql-results', function (config) {\n    var parser = graphql_language_service_1.onlineParser({\n        eatWhitespace: function (stream) { return stream.eatSpace(); },\n        lexRules: LexRules,\n        parseRules: ParseRules,\n        editorConfig: { tabSize: config.tabSize },\n    });\n    return {\n        config: config,\n        startState: parser.startState,\n        token: parser.token,\n        indent: indent,\n        electricInput: /^\\s*[}\\]]/,\n        fold: 'brace',\n        closeBrackets: {\n            pairs: '[]{}\"\"',\n            explode: '[]{}',\n        },\n    };\n});\nfunction indent(state, textAfter) {\n    var _a, _b;\n    var levels = state.levels;\n    var level = !levels || levels.length === 0\n        ? state.indentLevel\n        : levels[levels.length - 1] -\n            (((_a = this.electricInput) === null || _a === void 0 ? void 0 : _a.test(textAfter)) ? 1 : 0);\n    return (level || 0) * (((_b = this.config) === null || _b === void 0 ? void 0 : _b.indentUnit) || 0);\n}\nvar LexRules = {\n    Punctuation: /^\\[|]|\\{|\\}|:|,/,\n    Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n    String: /^\"(?:[^\"\\\\]|\\\\(?:\"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*\"?/,\n    Keyword: /^true|false|null/,\n};\nvar ParseRules = {\n    Document: [graphql_language_service_1.p('{'), graphql_language_service_1.list('Entry', graphql_language_service_1.p(',')), graphql_language_service_1.p('}')],\n    Entry: [graphql_language_service_1.t('String', 'def'), graphql_language_service_1.p(':'), 'Value'],\n    Value: function (token) {\n        switch (token.kind) {\n            case 'Number':\n                return 'NumberValue';\n            case 'String':\n                return 'StringValue';\n            case 'Punctuation':\n                switch (token.value) {\n                    case '[':\n                        return 'ListValue';\n                    case '{':\n                        return 'ObjectValue';\n                }\n                return null;\n            case 'Keyword':\n                switch (token.value) {\n                    case 'true':\n                    case 'false':\n                        return 'BooleanValue';\n                    case 'null':\n                        return 'NullValue';\n                }\n                return null;\n        }\n    },\n    NumberValue: [graphql_language_service_1.t('Number', 'number')],\n    StringValue: [graphql_language_service_1.t('String', 'string')],\n    BooleanValue: [graphql_language_service_1.t('Keyword', 'builtin')],\n    NullValue: [graphql_language_service_1.t('Keyword', 'keyword')],\n    ListValue: [graphql_language_service_1.p('['), graphql_language_service_1.list('Value', graphql_language_service_1.p(',')), graphql_language_service_1.p(']')],\n    ObjectValue: [graphql_language_service_1.p('{'), graphql_language_service_1.list('ObjectField', graphql_language_service_1.p(',')), graphql_language_service_1.p('}')],\n    ObjectField: [graphql_language_service_1.t('String', 'property'), graphql_language_service_1.p(':'), 'Value'],\n};\n//# sourceMappingURL=mode.js.map"],"sourceRoot":""}