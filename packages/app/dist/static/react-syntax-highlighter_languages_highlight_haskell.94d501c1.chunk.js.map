{"version":3,"sources":["webpack://app/../node_modules/highlight.js/lib/languages/haskell.js"],"names":[],"mappings":"sFAQA,WAAiB,EAAM,CACrB,KAAM,GAAU,CACd,SAAU,CACR,EAAK,QAAQ,KAAM,GAAG,EACtB,EAAK,QACH,MACA,MACA,CACE,SAAU,CAAC,MAAM,CACnB,CACF,CACF,CACF,EAEM,EAAS,CACb,UAAW,OACX,MAAO,OACP,IAAK,MACP,EAEM,EAAe,CACnB,UAAW,OACX,MAAO,KACP,IAAK,GACP,EAEM,EAAc,CAClB,UAAW,OACX,MAAO,kBACP,UAAW,CACb,EAEM,EAAO,CACX,MAAO,MACP,IAAK,MACL,QAAS,IACT,SAAU,CACR,EACA,EACA,CACE,UAAW,OACX,MAAO,wCACT,EACA,EAAK,QAAQ,EAAK,WAAY,CAC5B,MAAO,eACT,CAAC,EACD,CACF,CACF,EAEM,EAAS,CACb,MAAO,KACP,IAAK,KACL,SAAU,EAAK,QACjB,EAEA,MAAO,CACL,KAAM,UACN,QAAS,CAAC,IAAI,EACd,SACE,wOAIF,SAAU,CAER,CACE,cAAe,SACf,IAAK,QACL,SAAU,eACV,SAAU,CACR,EACA,CACF,EACA,QAAS,UACX,EACA,CACE,MAAO,eACP,IAAK,IACL,SAAU,6BACV,SAAU,CACR,EACA,CACF,EACA,QAAS,UACX,EACA,CACE,UAAW,QACX,MAAO,8BACP,IAAK,QACL,SAAU,8BACV,SAAU,CACR,EACA,EACA,CACF,CACF,EACA,CACE,UAAW,QACX,MAAO,0BACP,IAAK,IACL,SAAU,oCACV,SAAU,CACR,EACA,EACA,EACA,EACA,CACF,CACF,EACA,CACE,cAAe,UACf,IAAK,IACL,SAAU,CACR,EACA,EACA,CACF,CACF,EACA,CACE,cAAe,sBACf,IAAK,IACL,SAAU,CACR,EAAK,cACL,CACF,CACF,EACA,CACE,MAAO,gBACP,IAAK,IACL,SAAU,uEAEV,SAAU,CACR,EACA,EAAK,kBACL,CACF,CACF,EACA,CACE,UAAW,OACX,MAAO,kCACP,IAAK,GACP,EAEA,EACA,EAKA,EAAK,kBACL,EAAK,cACL,EACA,EAAK,QAAQ,EAAK,WAAY,CAC5B,MAAO,gBACT,CAAC,EACD,EACA,CACE,MAAO,OACT,CACF,CACF,CACF,CAEA,EAAO,QAAU,C","file":"static/react-syntax-highlighter_languages_highlight_haskell.94d501c1.chunk.js","sourcesContent":["/*\nLanguage: Haskell\nAuthor: Jeremy Hull <sourdrums@gmail.com>\nContributors: Zena Treep <zena.treep@gmail.com>\nWebsite: https://www.haskell.org\nCategory: functional\n*/\n\nfunction haskell(hljs) {\n  const COMMENT = {\n    variants: [\n      hljs.COMMENT('--', '$'),\n      hljs.COMMENT(\n        /\\{-/,\n        /-\\}/,\n        {\n          contains: ['self']\n        }\n      )\n    ]\n  };\n\n  const PRAGMA = {\n    className: 'meta',\n    begin: /\\{-#/,\n    end: /#-\\}/\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: '^#',\n    end: '$'\n  };\n\n  const CONSTRUCTOR = {\n    className: 'type',\n    begin: '\\\\b[A-Z][\\\\w\\']*', // TODO: other constructors (build-in, infix).\n    relevance: 0\n  };\n\n  const LIST = {\n    begin: '\\\\(',\n    end: '\\\\)',\n    illegal: '\"',\n    contains: [\n      PRAGMA,\n      PREPROCESSOR,\n      {\n        className: 'type',\n        begin: '\\\\b[A-Z][\\\\w]*(\\\\((\\\\.\\\\.|,|\\\\w+)\\\\))?'\n      },\n      hljs.inherit(hljs.TITLE_MODE, {\n        begin: '[_a-z][\\\\w\\']*'\n      }),\n      COMMENT\n    ]\n  };\n\n  const RECORD = {\n    begin: /\\{/,\n    end: /\\}/,\n    contains: LIST.contains\n  };\n\n  return {\n    name: 'Haskell',\n    aliases: ['hs'],\n    keywords:\n      'let in if then else case of where do module import hiding ' +\n      'qualified type data newtype deriving class instance as default ' +\n      'infix infixl infixr foreign export ccall stdcall cplusplus ' +\n      'jvm dotnet safe unsafe family forall mdo proc rec',\n    contains: [\n      // Top-level constructions.\n      {\n        beginKeywords: 'module',\n        end: 'where',\n        keywords: 'module where',\n        contains: [\n          LIST,\n          COMMENT\n        ],\n        illegal: '\\\\W\\\\.|;'\n      },\n      {\n        begin: '\\\\bimport\\\\b',\n        end: '$',\n        keywords: 'import qualified as hiding',\n        contains: [\n          LIST,\n          COMMENT\n        ],\n        illegal: '\\\\W\\\\.|;'\n      },\n      {\n        className: 'class',\n        begin: '^(\\\\s*)?(class|instance)\\\\b',\n        end: 'where',\n        keywords: 'class family instance where',\n        contains: [\n          CONSTRUCTOR,\n          LIST,\n          COMMENT\n        ]\n      },\n      {\n        className: 'class',\n        begin: '\\\\b(data|(new)?type)\\\\b',\n        end: '$',\n        keywords: 'data family type newtype deriving',\n        contains: [\n          PRAGMA,\n          CONSTRUCTOR,\n          LIST,\n          RECORD,\n          COMMENT\n        ]\n      },\n      {\n        beginKeywords: 'default',\n        end: '$',\n        contains: [\n          CONSTRUCTOR,\n          LIST,\n          COMMENT\n        ]\n      },\n      {\n        beginKeywords: 'infix infixl infixr',\n        end: '$',\n        contains: [\n          hljs.C_NUMBER_MODE,\n          COMMENT\n        ]\n      },\n      {\n        begin: '\\\\bforeign\\\\b',\n        end: '$',\n        keywords: 'foreign import export ccall stdcall cplusplus jvm ' +\n                  'dotnet safe unsafe',\n        contains: [\n          CONSTRUCTOR,\n          hljs.QUOTE_STRING_MODE,\n          COMMENT\n        ]\n      },\n      {\n        className: 'meta',\n        begin: '#!\\\\/usr\\\\/bin\\\\/env\\ runhaskell',\n        end: '$'\n      },\n      // \"Whitespaces\".\n      PRAGMA,\n      PREPROCESSOR,\n\n      // Literals and names.\n\n      // TODO: characters.\n      hljs.QUOTE_STRING_MODE,\n      hljs.C_NUMBER_MODE,\n      CONSTRUCTOR,\n      hljs.inherit(hljs.TITLE_MODE, {\n        begin: '^[_a-z][\\\\w\\']*'\n      }),\n      COMMENT,\n      { // No markup, relevance booster\n        begin: '->|<-'\n      }\n    ]\n  };\n}\n\nmodule.exports = haskell;\n"],"sourceRoot":""}